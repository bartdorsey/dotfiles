" XDG support

if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif
if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME."/.local/state" | endif

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p', 0700)

if !has('nvim') " Neovim has its own special location
  set viminfofile=$XDG_STATE_HOME/vim/viminfo
endif

" [[ Setting options ]]

" Filetype Detection on
filetype on
filetype plugin indent on

" Netrw options
let g:netrw_liststyle = 3
let g:netrw_banner = 0

" Make line numbers default
set number
set relativenumber

" Set <space> as the leader key
let mapleader = " "
let maplocalleader = " "

" Set the terminal title
set title

" Customize the terminal title
autocmd BufEnter,BufWinEnter,TabEnter * 
  \ let &titlestring = (has('nvim') ? 'nvim' : 'vim') . 
  \ (expand('%:t') != '' ? ' [' . expand('%:t') . ']' : '')

" Enable 256 colors
set termguicolors

" Set the characters used for indentations
set list
set listchars=tab:».",extends:›,precedes:‹,nbsp:·,trail:·

" Split behavior
set splitbelow
set splitright

" Enable mouse mode
set mouse=a

" Enable break indent
set breakindent

" Case insensitive searching UNLESS /C or capital in search
set ignorecase
set smartcase

" Decrease update time
set updatetime=250
set signcolumn=yes

" Set completeopt to have a better completion experience
set completeopt=menuone,noselect,preview

" Indenting
set softtabstop=4
set tabstop=4
set shiftwidth=4
set expandtab
set smartindent
set nowrap

" Search Highlighting
set nohlsearch
set incsearch

" Turn on column for icons all the time
set signcolumn=yes

set updatetime=50
set colorcolumn=80
set cursorline
syntax on

" Startify options
let g:startify_custom_header = ''
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 1
let g:startify_persistence = 0

let g:startify_lists = [
    \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
    \ { 'type': 'files',     'header': ['   MRU']            },
    \ { 'type': 'sessions',  'header': ['   Sessions']       },
    \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
    \ { 'type': 'commands',  'header': ['   Commands']       },
    \ ]

let g:startify_bookmarks = [
    \ {'v': '~/.dotfiles/vim/.config/vim/vimrc'},
    \ {'n': '~/.dotfiles/nvim/.config/nvim/lua/init.lua'},
    \]

let g:startify_commands = [
    \ ['Vim Reference', 'h ref'],
    \ ]

" keep cursor always centered
augroup VCenterCursor
  au!
  au BufEnter,WinEnter,WinNew,VimResized *,*.*
        \ let &scrolloff=winheight(win_getid())/2
augroup END

" sane terminal keymap to move back to normal mode
tnoremap <c-\> <c-\><c-n>

" Run neovim config if we are in neovim
if has('nvim')
    " Disable netrw for neovim
    let g:loaded_netrw = 1
    let g:loaded_netrwPlugin = 1

    let g:startify_session_dir = $HOME . "/.local/state/nvim/sessions/" 

    " Run the rest of my neovim config
    source ~/.config/nvim/init.vim
    finish
else
    " gvim specific 
    if has("gui_running")
        set guioptions-=m  "menu bar
        set guioptions-=T  "toolbar
        set guioptions-=r  "scrollbar
        set guifont=JetBrainsMono_NFM:h12
    endif

    " Commands to load vimrc and vim plugins
    " Sets the working directory to Neovim config and opens the main config file
    command! Config execute 'cd ~/.dotfiles/vim/.config/vim/' | execute 'edit vimrc'

    " Sets the working directory to the plugins directory and opens it with Ex
    command! ConfigDir execute 'cd ~/.dotfiles/vim/.config/vim/' | execute 'Ex ~/.dotfiles/vim/.config/vim/'

    command! DotFiles execute 'cd ~/.dotfiles' | execute 'Ex ~/.dotfiles'
    let g:lightline = { 'colorscheme': 'catppuccin_mocha' }

    let g:highlightedyank_highlight_duration = 200

    call plug#begin()

    Plug 'tpope/vim-sensible'
    Plug 'catppuccin/vim', { 'as': 'catppuccin' }
    Plug 'Donaldttt/fuzzyy'
    Plug 'tpope/vim-vinegar'
    Plug 'mhinz/vim-startify'
    Plug 'itchyny/lightline.vim'
    Plug 'machakann/vim-highlightedyank'
    call plug#end()

    colorscheme catppuccin_mocha
end

