#!/usr/bin/env zsh

function cyan() {
    local CYAN="\033[0;36m"
    local RESET="\033[0m"
    echo -e "${CYAN}$1${RESET}"
}

# Check for required dependencies
check_dependencies() {
    local missing_deps=()
    
    for cmd in git stow; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        cyan "❌ Missing required dependencies: ${missing_deps[*]}"
        cyan "Please install them first:"
        cyan "  Ubuntu/Debian: sudo apt install ${missing_deps[*]}"
        cyan "  macOS: brew install ${missing_deps[*]}"
        cyan "  Arch: sudo pacman -S ${missing_deps[*]}"
        exit 1
    fi
}

check_dependencies

cyan "--------------------"
cyan "Updating Git Modules"
cyan "--------------------"
git submodule init
git submodule update

# Set DEVMODE
if [ -f "$HOME/.config/devmode" ]; then
    cyan "---------------"
    cyan "DEVMODE enabled"
    cyan "---------------"
    export DEVMODE=1
fi

cyan "-------------------------"
cyan "Bootstrapping directories"
cyan "-------------------------"

# Bootstrap some basic directories
if [ ! -d "$HOME/.local" ]; then
    mkdir -vp "$HOME/.local"
fi

if [ ! -d "$HOME/.ssh" ]; then
    mkdir -vp "$HOME/.ssh"
fi

if [ ! -d "$HOME/.local/share" ]; then
    mkdir -vp "$HOME/.local/share"
fi

if [ ! -d "$HOME/.local/share/gnupg" ]; then
    mkdir -vp "$HOME/.local/share/gnupg"
    chmod -v 700 "$HOME/.local/share/gnupg"
fi

if [ ! -d "$HOME/.config/zen" ]; then
    mkdir -vp "$HOME/.config/zen"
fi

if [ ! -d "$HOME/.config/firefox" ]; then
    mkdir -vp "$HOME/.config/firefox"
fi

if [ ! -d "$HOME/.config/systemd/user/default.target.wants" ]; then
    mkdir -p -v "$HOME/.config/systemd/user/default.target.wants"
fi

if [ ! -d "$HOME/.config/git" ]; then
    mkdir -vp "$HOME/.config/git"
fi

if [ ! -d "$HOME/.claude" ]; then
    mkdir -vp "$HOME/.claude"
fi

if [ -f /etc/NIXOS ]; then
    cyan "-------------------------------------------------------------"
    cyan "Detected NixOS, skipping stow (using home-manager instead)..."
    cyan "-------------------------------------------------------------"
elif type stow &>/dev/null; then

    cyan "-------------------------"
    cyan "Symlinking in dotfiles..."
    cyan "-------------------------"
    ignore_directories=("metadata/" "firefox/" "windows/" "nix/" "glzr/" "syncthing/")

    if [ -n "$OMARCH_PATH" ]; then
        cyan "---------------------------------------------------------------"
        cyan "Detected Omarchy, using omarchy configs for hyprland and waybar"
        cyan "---------------------------------------------------------------"
        ignore_directories+=("hypr/" "waybar/" "fastfetch/" "btop/")
    else
        ignore_directories+=("omarchy/")
    fi

    for i in */; do
        if [[ " ${ignore_directories[@]} " =~ " $i " ]]; then
            cyan "Ignoring $i"
            continue
        fi
        cyan "Stowing $i"
        stow -v -R "$i" -t "$HOME" 2>&1 | grep "WARNING"
    done

fi

if type mise &>/dev/null && [ ! -d "/etc/nixos" ]; then

    cyan "--------------------------"
    cyan "Installing tools with mise"
    cyan "--------------------------"
    mise install
else
    cyan "----------------------"
    cyan "Skipping mise installs"
    cyan "----------------------"
fi

if type git-crypt &>/dev/null; then
    cyan '--------------------------------'
    cyan 'Trying to unlock encrypted files'
    cyan '--------------------------------'
    git-crypt unlock
fi

cyan "--------------------------"
cyan "Fixing SSH key permissions"
cyan "--------------------------"

chmod -v 700 ./ssh/.ssh
chmod -v 600 ./ssh/.ssh/id*
chmod -v 644 ./ssh/.ssh/*.pub


# Install tmux plugin manager if it's not installed
if [[ ! -d "$HOME/.config/tmux/plugins/tpm" ]]; then
    cyan "------------------------------"
    cyan "Installing Tmux Plugin Manager"
    cyan "------------------------------"
    git clone https://github.com/tmux-plugins/tpm $HOME/.config/tmux/plugins/tpm
fi

# Clean Install tmux plugins, and update them
if [[ -d "$HOME/.config/tmux/plugins/tpm" ]]; then
    cyan "-----------------------"
    cyan "Installing tmux plugins"
cyan "-----------------------"
    $HOME/.config/tmux/plugins/tpm/bin/clean_plugins
    $HOME/.config/tmux/plugins/tpm/bin/install_plugins
    $HOME/.config/tmux/plugins/tpm/bin/update_plugins all
fi

# Install vim plugins
if type vim &>/dev/null; then
    cyan "-------------------------"
    cyan "Installing vim plugins"
    cyan "-------------------------"

    vim +PlugInstall +qa
fi

# Install neovim plugins
if type nvim &>/dev/null; then
    cyan "-------------------------"
    cyan "Installing neovim plugins"
    cyan "-------------------------"
    nvim --headless +"Lazy! clean" +qa
    nvim --headless +"Lazy! restore" +qa
fi

# Install zsh plugins
install_zsh_plugin() {
    local plugin="$1"
    local ZSH_PLUGIN_DIR="$HOME/.local/share/zsh/plugins"
    
    # Create directory if it doesn't exist
    mkdir -p "$ZSH_PLUGIN_DIR"
    
    # Extract repo name (everything after last /)
    local repo_name="${plugin##*/}"
    local plugin_path="$ZSH_PLUGIN_DIR/$repo_name"
    
    if [[ -d "$plugin_path" ]]; then
        cyan "Plugin $repo_name already exists, updating..."
        git -C "$plugin_path" pull
    else
        cyan "Cloning $plugin..."
        git clone "https://github.com/$plugin.git" "$plugin_path"
    fi
}

# ZSH Plugins
install_zsh_plugin "zsh-users/zsh-autosuggestions"
install_zsh_plugin "zsh-users/zsh-syntax-highlighting"
install_zsh_plugin "zdharma-continuum/fast-syntax-highlighting"
install_zsh_plugin "zsh-users/zsh-completions"
install_zsh_plugin "Aloxaf/fzf-tab"
install_zsh_plugin "marlonrichert/zsh-autocomplete"

if [[ -v WSL_DISTRO_NAME ]]; then
    code() {
        /mnt/c/Users/bart/AppData/Local/Programs/Microsoft\ VS\ Code/bin/code "$@"
    }
fi

